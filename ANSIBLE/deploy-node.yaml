---
- name: Install node and npm
  hosts: 167.71.39.21
  tasks:
    # apt update
    - name: Update apt repo and cache
      ansible.builtin.apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
    - name: Install nodejs and npm
      ansible.builtin.apt:
        force_apt_get: yes
        pkg:
          - nodejs
          - npm

- name: Create new linux user for node app
  hosts: 167.71.39.21
  vars_files:
    - project-vars
  tasks:
    - name: Create linux user
      ansible.builtin.user:
        name: "{{linux_name}}"
        comment: Node User
        group: admin

  # The shell and command modules are run every time via ansible and the state is not checked! 
  # The state should manually be checked to avoid multiple run of the same command in different runs.
- name: Deploy nodejs app
  hosts: 167.71.39.21
  # Run the commands as arsha user
  become: True
  become_user: "{{linux_name}}"
  vars_files:
    - project-vars
  tasks:
    - name: Unpack the nodejs file
      unarchive:
        src: "{{location}}/nodejs-app-{{version}}.tgz"
        dest: "{{user_home_dir}}"
    # npm install
    - name: Install dependencies
      community.general.npm:
        path: "{{user_home_dir}}/package"
    - name: Start the application
      ansible.builtin.command: 
        chdir: "{{user_home_dir}}/package/app"
        # This command blocks the terminal! We need to run it in the background by adding asynch and poll
        cmd: node server
      async: 1000
      poll: 0
    - name: Ensure app is running
      # This is actually executed in the shell in contrast to command module but command module is more secure.
      ansible.builtin.shell: ps aux | grep node
      # Result of the above command is assigned to app_status var which can be accessed later
      register: app_status
    - ansible.builtin.debug: msg={{app_status.stdout_lines}}
